/**
 * @author Yang Zhao
 */
package com.example.wordhunter;

import java.io.IOException;

import android.content.Context;
import android.graphics.Bitmap;
import android.hardware.Camera;
import android.hardware.Camera.PreviewCallback;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;

/**
 * @author Yang Zhao
 * 
 */
public class Preview extends SurfaceView implements SurfaceHolder.Callback {
	SurfaceHolder mHolder;
	Camera mCamera;
	LabelOnTop mLabelOnTop;
	boolean mFinished;

	Preview(Context context, LabelOnTop labelOnTop) {
		super(context);

		mLabelOnTop = labelOnTop;
		mFinished = false;

		// Install a SurfaceHolder.Callback so we get notified when the
		// underlying surface is created and destroyed.
		mHolder = getHolder();
		mHolder.addCallback(this);
	}

	public void surfaceCreated(SurfaceHolder holder) {
		mCamera = Camera.open();
		try {
			mCamera.setPreviewDisplay(holder);

			// Preview callback used whenever new viewfinder frame is available
			mCamera.setPreviewCallback(new PreviewCallback() {
				public void onPreviewFrame(byte[] data, Camera camera) {
					if ((mLabelOnTop == null) || mFinished)
						return;

					if (mLabelOnTop.mBitmap == null) {
						// Initialize the draw-on-top companion
						Camera.Parameters params = camera.getParameters();
						mLabelOnTop.mImageWidth = params.getPreviewSize().width;
						mLabelOnTop.mImageHeight = params.getPreviewSize().height;
						mLabelOnTop.mBitmap = Bitmap
								.createBitmap(mLabelOnTop.mImageWidth,
										mLabelOnTop.mImageHeight,
										Bitmap.Config.RGB_565);
						mLabelOnTop.mRGBData = new int[mLabelOnTop.mImageWidth
								* mLabelOnTop.mImageHeight];
						mLabelOnTop.mYUVData = new byte[data.length];
					}

					// Pass YUV data to draw-on-top companion
					System.arraycopy(data, 0, mLabelOnTop.mYUVData, 0,
							data.length);
					mLabelOnTop.invalidate();
				}
			});

			// Define on touch listener
			this.setOnTouchListener(new OnTouchListener() {
				public boolean onTouch(View v, MotionEvent event) {
					if (mLabelOnTop.mState == LabelOnTop.STATE_ORIGINAL) {
						mLabelOnTop.mState = LabelOnTop.STATE_PROCESSED;
					} else if (mLabelOnTop.mState == LabelOnTop.STATE_PROCESSED) {
						mLabelOnTop.mState = LabelOnTop.STATE_ORIGINAL;
					}
					return false;
				}
			});
		} catch (IOException exception) {
			mCamera.release();
			mCamera = null;
		}
	}

	public void surfaceDestroyed(SurfaceHolder holder) {
		// Surface will be destroyed when we return, so stop the preview.
		// Because the CameraDevice object is not a shared resource, it's very
		// important to release it when the activity is paused.
		mFinished = true;
		mCamera.setPreviewCallback(null);
		mCamera.stopPreview();
		mCamera.release();
		mCamera = null;
	}

	public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
		// Now that the size is known, set up the camera parameters and begin
		// the preview.
		Camera.Parameters parameters = mCamera.getParameters();
		parameters.setPreviewSize(320, 240);
		parameters.setPreviewFrameRate(15);
		parameters.setSceneMode(Camera.Parameters.SCENE_MODE_NIGHT);
		parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);
		mCamera.setParameters(parameters);
		mCamera.startPreview();
	}

}
